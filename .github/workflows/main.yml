name: Visa Appointment Check

on:
  schedule:
    - cron: "*/10 4-9 * * *" # Runs Every 10 minutes, between 10:00 AM and 02:59 PM IST
  workflow_dispatch: # Allows manual trigger

jobs:
  check-appointment:
    runs-on: ubuntu-latest
    environment: visa_keys
    env:
      URL: ${{ secrets.URL }}
      EMAIL: ${{ secrets.EMAIL }}
      PASSWORD: ${{ secrets.PASSWORD }}
      SCHEDULE_ID: ${{ secrets.SCHEDULE_ID }}
      FACILITY_ID: ${{ secrets.FACILITY_ID }}
      SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
      SMTP_PORT: ${{ secrets.SMTP_PORT }}
      SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
      SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
      NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.12"

      - name: Install Chrome
        run: |
          wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt install ./google-chrome-stable_current_amd64.deb
          google-chrome --version  # Log Chrome version
          which google-chrome      # Log Chrome location

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Create env file
        env:
          URL: ${{ secrets.URL }}
          EMAIL: ${{ secrets.EMAIL }}
          PASSWORD: ${{ secrets.PASSWORD }}
          SCHEDULE_ID: ${{ secrets.SCHEDULE_ID }}
          FACILITY_ID: ${{ secrets.FACILITY_ID }}
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT: ${{ secrets.SMTP_PORT }}
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
          NOTIFICATION_EMAIL: ${{ secrets.NOTIFICATION_EMAIL }}
        run: |
          echo "URL=$URL" >> .env
          echo "EMAIL=$EMAIL" >> .env
          echo "PASSWORD=$PASSWORD" >> .env
          echo "SCHEDULE_ID=$SCHEDULE_ID" >> .env
          echo "FACILITY_ID=$FACILITY_ID" >> .env
          echo "SMTP_SERVER=$SMTP_SERVER" >> .env
          echo "SMTP_PORT=$SMTP_PORT" >> .env
          echo "SMTP_USERNAME=$SMTP_USERNAME" >> .env
          echo "SMTP_PASSWORD=$SMTP_PASSWORD" >> .env
          echo "NOTIFICATION_EMAIL=$NOTIFICATION_EMAIL" >> .env
          # Verify env file creation and content (will mask sensitive data)
          echo "Checking if .env file exists:"
          test -f .env && echo "✓ .env file created" || echo "✗ .env file missing"
          echo "Checking .env file contents (secrets will be masked):"
          cat .env | sed 's/=.*/=****/'

      - name: Debug Environment
        run: |
          echo "Checking if environment variables are set:"
          printenv | grep -E "URL|EMAIL|PASSWORD|SCHEDULE_ID|FACILITY_ID|SMTP_SERVER|SMTP_PORT|SMTP_USERNAME|SMTP_PASSWORD|NOTIFICATION_EMAIL" | sed 's/=.*/=****/'

      - name: Create logs directory
        run: mkdir -p logs

      - name: Run visa check script
        run: |
          echo "Starting visa check script..."
          echo "Current directory: $(pwd)"
          echo "Python version: $(python --version)"
          echo "Contents of current directory:"
          ls -la

          # Run the script with detailed error output
          python -u visa.py || {
            echo "Script failed with exit code $?"
            echo "Contents of logs directory:"
            ls -la logs/
            cat logs/*.log
            exit 1
          }

          echo "Script completed"
          echo "Contents of logs directory:"
          ls -la logs/
          cat logs/*.log
      - name: Upload logs
        if: always() # This ensures logs are uploaded even if the script fails
        uses: actions/upload-artifact@v3
        with:
          name: visa-check-logs
          path: logs/*.log # Adjust this path to match your log file location
